/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.android.admob;

import android.app.Activity;
import android.content.Context;

import java.util.ArrayList;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import androidx.annotation.Nullable;

import com.google.android.gms.ads.AdSize;
import com.google.android.ump.ConsentDebugSettings;
import com.google.android.ump.ConsentForm;
import com.google.android.ump.ConsentInformation;
import com.google.android.ump.ConsentRequestParameters;
import com.google.android.ump.FormError;
import com.google.android.ump.UserMessagingPlatform;

@Kroll.module(name="Admob", id="ti.android.admob")
public class AdmobModule extends KrollModule
{
	private static final String TAG = "Admob Module";
    public static String MODULE_NAME = "Android Admob Module";

    //CONSENT
    private ConsentInformation consentInformation;
    private ConsentForm _consentForm;

    //EVENTS
    @Kroll.constant
    public static final String AD_RECEIVED = "ad_received";
    @Kroll.constant
    public static final String AD_CLOSED = "ad_closed";
    @Kroll.constant
    public static final String AD_NOT_RECEIVED = "ad_not_received";
    @Kroll.constant
    public static final String AD_LOADED = "ad_loaded";
    @Kroll.constant
    public static final String AD_DESTROYED = "ad_destroyed";
    @Kroll.constant
    public static final String AD_OPENED = "ad_opened";
    @Kroll.constant
    public static final String AD_FAILED_TO_SHOW = "ad_failed_to_show";
    @Kroll.constant
    public static final String AD_REWARDED = "ad_rewarded";
    @Kroll.constant
    public static final String CONSENT_READY = "consent_ready";
    @Kroll.constant
    public static final String CONSENT_ERROR = "consent_error";
    @Kroll.constant
    public static final String CONSENT_INFO_UPDATE_FAILURE = "consent_info_update_failure";
    @Kroll.constant
    public static final String CONSENT_FORM_DISMISSED = "consent_form_dismissed";
    @Kroll.constant
    public static final String CONSENT_FORM_LOADED = "consent_form_loaded";
    
    //AD SIZES
    @Kroll.constant
    public static final String OPEN_APP = "OPEN_APP";
    @Kroll.constant
    public static final String BANNER = "BANNER";
    @Kroll.constant
    public static final String ADAPTATIVE_BANNER = "ADAPTATIVE_BANNER";
    @Kroll.constant
    public static final String REWARDED_VIDEO = "REWARDED_VIDEO";
    @Kroll.constant
    public static final String MEDIUM_RECTANGLE = "MEDIUM_RECTANGLE";
    @Kroll.constant
    public static final String FULL_BANNER = "FULL_BANNER";
    @Kroll.constant
    public static final String LEADERBOARD = "LEADERBOARD";
    @Kroll.constant
    public static final String SMART_BANNER = "SMART_BANNER";
    @Kroll.constant
    public static final String INTERSTITIAL = "INTERSTITIAL";
    @Kroll.constant
    public static final String NATIVE_ADS = "NATIVE_ADS";
    @Kroll.constant
    public static final String FLUID = "FLUID";
    @Kroll.constant
    public static final String LARGE_BANNER = "LARGE_BANNER";
    @Kroll.constant
    public static final String SEARCH = "SEARCH";
    @Kroll.constant
    public static final String WIDE_SKYSCRAPER = "WIDE_SKYSCRAPER";
    
    public static String TEST_DEVICE_ID;
    public static Boolean TESTING = false;
    public static String PUBLISHER_ID;
    public static String AD_UNIT_ID;
    public static String PROPERTY_COLOR_BG;
    public static String NATIVE_ADS_BACKGROUND_COLOR;
    public static int AD_HEIGHT = 132;
    public static int AD_WIDTH = 360;
    public static String PROPERTY_COLOR_BG_TOP;
    public static String PROPERTY_COLOR_BORDER;
    public static String PROPERTY_COLOR_TEXT;
    public static String PROPERTY_COLOR_LINK;
    public static String PROPERTY_COLOR_URL;
    public static String PROPERTY_COLOR_TEXT_DEPRECATED;
    public static String PROPERTY_COLOR_LINK_DEPRECATED;
    public static String AD_SIZE_TYPE;
    public static ArrayList<AdSize> AD_SIZES;
    public static String AD_SIZES_LABEL;
    public static String KEYWORD;
    public static String CONTENT_URL;
    public static String CUSTOM_NATIVE_TEMPLATE_ID;
    
    public static String VIEW_TYPE;
    
    @Kroll.constant
    public static final String TYPE_ADS = "ads";
    
    @Kroll.constant
    public static final String TYPE_STARS = "stars";
    
    @Kroll.constant
    public static final String TYPE_MEDIA = "media";
    
    public static String MASTER_VIEW;
    public static String MEDIA_VIEW;
    public static String HEADLINE_LABEL;
    public static String IMAGE_VIEW;
    public static String BODY_LABEL;
    public static String CALL_TO_ACTION_BUTTON;
    public static String LOGO_OR_ICON_IMAGE_VIEW;
    public static String ADVERTISER_LABEL;
    public static String STORE_LABEL;
    public static String STARS_VIEW;
    public static String PRICE_LABEL;
    public static String EXTRA_BUNDLE;

    public AdmobModule() {
        Log.d(TAG, "Admob Module Instantiated");
    }

    public void setTesting(Boolean testing) {
        Log.d(TAG, "setTesting(): " + testing);
        TESTING = testing;
    }
    
    public void setHeight(int height) {
        Log.d(TAG, "setHeight(): " + height);
        AD_HEIGHT = height;
    }
    
    public void setWidth(int width) {
        Log.d(TAG, "setHeight(): " + width);
        AD_WIDTH = width;
    }

    static {
        PROPERTY_COLOR_BG = "backgroundColor";
        PROPERTY_COLOR_BG_TOP = "backgroundTopColor";
        PROPERTY_COLOR_BORDER = "borderColor";
        PROPERTY_COLOR_TEXT = "textColor";
        PROPERTY_COLOR_LINK = "linkColor";
        PROPERTY_COLOR_URL = "urlColor";
        PROPERTY_COLOR_TEXT_DEPRECATED = "primaryTextColor";
        PROPERTY_COLOR_LINK_DEPRECATED = "secondaryTextColor";
        AD_SIZE_TYPE = "adSizeType";
        AD_SIZES_LABEL = "adSizes";
        
        VIEW_TYPE = "viewType";
        
        MASTER_VIEW = "masterView";
        MEDIA_VIEW = "mediaView";
        HEADLINE_LABEL = "headlineLabel";
        IMAGE_VIEW = "imageView";
        BODY_LABEL = "bodyLabel";
        CALL_TO_ACTION_BUTTON = "callToActionButton";
        LOGO_OR_ICON_IMAGE_VIEW = "logoOrIconImageView";
        ADVERTISER_LABEL = "advertiserLabel";
        STORE_LABEL = "storeLabel";
        STARS_VIEW = "starsView";
        PRICE_LABEL = "priceLabel";
        NATIVE_ADS_BACKGROUND_COLOR = "backgroundColor";
        
        KEYWORD = "keyword";
        CONTENT_URL = "contentUrl";
        CUSTOM_NATIVE_TEMPLATE_ID = "customNativeTemplateId";
        
        EXTRA_BUNDLE = "extras";
    }
    
    private final String ANDROID_ADVERTISING_ID = "androidAdId";
	private final String IS_LIMIT_AD_TRACKING_ENABLED = "isLimitAdTrackingEnabled";
    
	// Response from "isGooglePlayServicesAvailable()""

	// clang-format off
	@Kroll.setProperty
	@Kroll.method
	public void setPublisherId(String pubId)
	// clang-format on
	{
		Log.d(TAG, "setPublisherId(): " + pubId);
		PUBLISHER_ID = pubId;
	}

    @Kroll.method
    private void requestConsentForm(){

        Context appContext = TiApplication.getInstance().getApplicationContext();
        Context currentActivity = TiApplication.getInstance().getCurrentActivity();

        ConsentDebugSettings debugSettings = new ConsentDebugSettings.Builder(appContext)
                .setDebugGeography(ConsentDebugSettings
                        .DebugGeography
                        .DEBUG_GEOGRAPHY_EEA)
                .addTestDeviceHashedId(AdmobModule.TEST_DEVICE_ID)
                .build();

        // Set tag for underage of consent. false means users are not underage.
        ConsentRequestParameters params = new ConsentRequestParameters
                .Builder()
                .setConsentDebugSettings(debugSettings)
                .setTagForUnderAgeOfConsent(false)
                .build();

        consentInformation = UserMessagingPlatform.getConsentInformation(appContext);
        consentInformation.requestConsentInfoUpdate((Activity) currentActivity, params,
                new ConsentInformation.OnConsentInfoUpdateSuccessListener() {
                    @Override
                    public void onConsentInfoUpdateSuccess() {
                        // The consent information state was updated.
                        // You are now ready to check if a form is available.
                        if (consentInformation.isConsentFormAvailable()) {
                            loadForm();
                            if (AdmobModule.this.hasListeners(AdmobModule.CONSENT_READY)) {
                                AdmobModule.this.fireEvent(AdmobModule.CONSENT_READY, (Object) new KrollDict());
                            }
                        }
                    }
                },
                new ConsentInformation.OnConsentInfoUpdateFailureListener() {
                    @Override
                    public void onConsentInfoUpdateFailure(FormError formError) {
                        // Handle the error.
                        Log.e(TAG, ("ConsentForm Update Failure : " + formError.getMessage()));
                        if (AdmobModule.this.hasListeners(AdmobModule.CONSENT_INFO_UPDATE_FAILURE)) {
                            KrollDict errorCallback = new KrollDict();
                            errorCallback.put("message", formError.getMessage());
                            AdmobModule.this.fireEvent(AdmobModule.CONSENT_INFO_UPDATE_FAILURE, (Object) errorCallback);
                        }
                    }
                }
        );
    }

    private void loadForm(){

	    Context appContext = TiApplication.getInstance().getApplicationContext();
        Context currentActivity = TiApplication.getInstance().getCurrentActivity();

        UserMessagingPlatform.loadConsentForm(
                appContext,
                new UserMessagingPlatform.OnConsentFormLoadSuccessListener() {
                    @Override
                    public void onConsentFormLoadSuccess(ConsentForm consentForm) {

                        if (AdmobModule.this.hasListeners(AdmobModule.CONSENT_FORM_LOADED)) {
                            AdmobModule.this.fireEvent(AdmobModule.CONSENT_FORM_LOADED, (Object) new KrollDict());
                        }

                        _consentForm = consentForm;
                        if(consentInformation.getConsentStatus() == ConsentInformation.ConsentStatus.REQUIRED) {
                            consentForm.show((Activity) currentActivity,
                                    new ConsentForm.OnConsentFormDismissedListener() {
                                        @Override
                                        public void onConsentFormDismissed(@Nullable FormError formError) {
                                            // Handle dismissal by reloading form.
                                            if (AdmobModule.this.hasListeners(AdmobModule.CONSENT_FORM_DISMISSED)) {
                                                KrollDict errorCallback = new KrollDict();
                                                errorCallback.put("message", formError.getMessage());
                                                AdmobModule.this.fireEvent(AdmobModule.CONSENT_FORM_DISMISSED, (Object) errorCallback);
                                            }
                                            loadForm();
                                        }
                                    }
                            );
                        }
                    }
                },
                new UserMessagingPlatform.OnConsentFormLoadFailureListener() {
                    @Override
                    public void onConsentFormLoadFailure(FormError formError) {
                        Log.e(TAG, ("ConsentForm error : " + formError.getMessage()));
                        if (AdmobModule.this.hasListeners(AdmobModule.CONSENT_ERROR)) {
                            KrollDict errorCallback = new KrollDict();
                            errorCallback.put("message", formError.getMessage());
                            AdmobModule.this.fireEvent(AdmobModule.CONSENT_ERROR, (Object) errorCallback);
                        }
                    }
                }
        );
    }

    @Kroll.method
    public void resetConsentForm(){
        consentInformation.reset();
    }
}